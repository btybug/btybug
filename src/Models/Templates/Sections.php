<?php
namespace Sahakavatar\Cms\Models\Templates;

use Sahakavatar\Cms\Models\Templates\Eloquent\Abstractions\TplModel;
use Sahakavatar\Cms\Models\Templates\SectionVariations;
use File;

class Sections extends TplModel
{

    /**
     * @var string
     */
    protected $tplpath = 'resources' . DS . 'sections';

    /**
     * @var string
     */
    protected $config = 'config.json';

    /**
     * @var string
     */
    public $variationPath = 'variations';

    public static $type = 'sections';

    /**
     * @return mixed
     */
    public function variations()
    {
        return $this->allVars('Sahakavatar\Cms\Models\SectionVariations');
    }

    public function makeVariation($array)
    {
        $vars = new TplVariations();
        if (isset($array['_token'])) unset($array['_token']);
        if ($this->type == 'frontlayouts') {
            $variations = $this->variations()->where('main', 1)->first();
            $array['settings'] = $variations->settings;
        }
        return $vars->createVariation($this, $array); // TODO: Change the autogenerated stub
    }

    public static function deleteVariation($id)
    {
        $slug = explode('.', $id);
        $tpl = self::find($slug[0]);

        return TplVariations::delete($id, $tpl);
    }

    /**
     * @param $id
     * @return null
     */
    public static function findVariation($id)
    {
        $slug = explode('.', $id);
        $variation = new SectionVariations();
        $section = self::find($slug[0]);
        if ($section) {
            return $variation->findVarition($section, $id);
        } else {
            return null;
        }
    }

    /**
     * @param $id
     * @return null
     */
    public static function findByVariation($id)
    {
        $slug = explode('.', $id);
        $variation = new SectionVariations();
        $section = self::find($slug[0]);
        if ($section) {
            return $section;
        } else {
            return null;
        }
    }

    public static function getTypes()
    {
        $types = [];
        return [];
        //TODO: make with tags

        $data = @json_decode(File::get(config('paths.sections_path') . 'configTypes.json'), 1)['types'];
        if (count($data)) {
            foreach ($data as $type) {
                $types[$type['foldername']] = $type['title'];
            }
        }

        return $types;
    }

    public static function findSection($slug)
    {
        $slug = explode('.', $slug);
        if (!isset($slug[0])) {
            return null;
        }
        return self::find($slug[0]);
    }


    /**
     * @param $slug
     * @return mixed
     */
    public static function renderLivePreview($slug = NULL)
    {
        $variation = self::findVariation($slug);
        $ui = self::find($slug);

        $settings = (isset($variation->settings) && $variation->settings) ? $variation->settings : [];
        $data['body'] = url('/admin/console/backend/sections/settings-iframe', $slug);
        $data['settings'] = url('/admin/console/backend/sections/settings-iframe', $slug) . '/settings';
        return view('console::backend.sections.preview', compact(['ui', 'id', 'data', 'settings', 'variation']));
    }

    /**
     * @param $slug
     * @return mixed
     */
    public static function renderLivePreviewFrontend($slug = NULL)
    {
        $variation = self::findVariation($slug);
        $ui = self::find($slug);

        $settings = (isset($variation->settings) && $variation->settings) ? $variation->settings : [];
        $data['body'] = url('/admin/uploads/gears/sections/settings-iframe', $slug);
        $data['settings'] = url('/admin/uploads/gears/sections/settings-iframe', $slug) . '/settings';
        return view('uploads::gears.sections.preview', compact(['ui', 'id', 'data', 'settings', 'variation']));
    }

    /**
     * @param $slug
     * @param null $title
     * @param $data
     * @param null $isSave
     * @return array|bool
     */
    public static function saveSettings($slug, $title = NULL, $data, $isSave = NULL)
    {
        if ($isSave && $isSave == 'save') {
            $section = self::findSection($slug);
            $existingVariation = self::findVariation($slug);
            $dataToInsert = [
                'title' => $title,
                'settings' => $data
            ];
            if (!$existingVariation) {
                $variation = new SectionVariations();
                $variation = $variation->createVariation($section, $dataToInsert);
            } else {
                $existingVariation->title = $title;
                $existingVariation->settings = $dataToInsert['settings'];
                $variation = $existingVariation;
            }
            if(!$variation->settings) {
                $variation->setAttributes('settings', []);
            }
            $settings = (isset($variation->settings) && $variation->settings) ? $variation->settings : [];

            if ($variation->save()) {
                return [
                    'html' => $section->render(['settings' => $settings, 'source' => BBGiveMe('array', 5), 'cheked' => 1]),
                    'slug' => $variation->id
                ];
            }
        } else {
            $section = self::findSection($slug);
            return [
                'html' => $section->render(['settings' => $data]),
                'slug' => $slug
            ];
        }
        return false;
    }


}